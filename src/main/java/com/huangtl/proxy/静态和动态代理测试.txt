静态代理：
    多个实现类（A/B）实现了接口I的方法hello。
    在B中定义了一个A类变量，B的hello方法调用了A的hello方法，并在方法前后增加代理的业务。
    B就是静态代理类，因为它代理了A

动态代理：
    需要用到两个java自带的类：Proxy和InvocationHandler
    Proxy类：负责创建代理对象---Proxy.newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h)
    InvocationHandler类：负责具体的业务执行逻辑，实现该类的invoke方法---invoke(Object proxy, Method method, Object[] args)
    实现：
        1.定义一个接口I和实现类A
        2.定义一个代理类MyProxy实现InvocationHandler，构造函数可传入需要代理的对象，
          实现invoke方法调用代理对象的方法，并在前后做代理业务处理
        3.调用代理类方法（因为代理类返回值强转为具体的所代理的类的类型，所以可以直接调该类的方法）
        MyProxy myProxy = new MyProxy(MyImp.class);
        //Proxy.newProxyInstance三个参数分别为：
        //一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载
        //一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了
        //一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上
        MyInterface myInterface = (MyInterface) Proxy.newProxyInstance(Test.class.getClassLoader(), new Class[]{MyInterface.class}, myProxy);
        //MyInterface myInterface = (MyInterface) Proxy.newProxyInstance(Test.class.getClassLoader(), MyImp.class.getInterfaces(), myProxy);
        System.out.println(myInterface.getClass().getName());
        myInterface.sayHello();